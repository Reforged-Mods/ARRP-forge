plugins {
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id 'maven-publish'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

loom {
    forge{
        mixinConfigs = ["arrp.mixins.json"]
    }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${project.archives_base_name}-forge"
version = project.mod_version
group = project.maven_group

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2"
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}


tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }

    repositories {
        maven {
            def mavenUrl = project.hasProperty('maven_url') ? project.property('maven_url') : ""
            url mavenUrl
            if (mavenUrl.startsWith("http")) {
                credentials {
                    username project.hasProperty('maven_username') ? project.property('maven_username') : ""
                    password project.hasProperty('maven_password') ? project.property('maven_password') : ""
                }
            }
        }
    }
}

/*
File file = file("tokens.properties")
if(file.exists()) {
    Properties properties = new Properties()
    try (InputStream stream = new FileInputStream(file)) {
        properties.load(stream)
    }

    unifiedPublishing {
        project {
            gameVersions = ["1.19"]
            gameLoaders = ["forge"]

        mainPublication(tasks.remapJar)

        System.getenv("CURSEFORGE")?.with { String key ->
            curseforge {
                token.set(key)
                id.set("463113")
            }
        }

        System.getenv("MODRINTH")?.with { String key ->
            modrinth {
                token.set(key)
                id.set("USLVyT7V")
            }
        }
    }
}*/
